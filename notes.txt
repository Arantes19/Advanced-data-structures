Graph draft
                        node
                          |  
                          | Edge
                          |                      
                        node
                      /      \
                Edge /        \  Edge
                    /          \
                   /            \
                node             node
                /   \             \ 
        Edge   /     \  Edge       \  Edge 
              /       \             \ 
            node      node          node

each node of the graph:
 - geocode of the node
 - vehicle associate can be null
 - client associate can be null
 - edge associate can be null

each edge of the graph:
 - geocode of the node connected
 - weight associate

each vehicle of the graph:
 - vehicle code associated
 - vehicle geocode 
 - vehicle type
 - vehicle batery
 - vehicle weight

each client of the graph:
 - client code associated
 - client geocode

Recomendável usar este algoritmo.

// Determinar se vértice 'id' já foi visitado
int visitado(int sequencia[],int pos, int id)
{int i;
 for(i=0;i<pos;i++) if (sequencia[i]==id) return(1);
 return(0);
}

// Listar os caminhos existentes entre dois vértices passados
// por parâmetro
void listarCaminhosAux(Adjacentes G[], int origem, int destino,  
		    int sequencia[], int posicao, int pesoTotal)
{ int i;
  Adjacentes aux;
  sequencia[posicao] = origem;
  if (origem==destino) 
  {for(i=0;i<posicao;i++) printf("%d->",sequencia[i]); // escrita de um caminho
   printf("%d (%d)\n",destino,pesoTotal);
  }
  else 
  {aux = G[origem]; 
   while (aux!=NULL)
   {if (!visitado(sequencia,posicao,aux->id)) 
	   listarCaminhosAux(G,aux->id,destino,sequencia,posicao+1,
			     pesoTotal+aux->peso);
    aux = aux->seguinte;
   }
  }
}

void listarCaminhos(Adjacentes G[], int origem, int destino)
{int sequencia[VERTICES];
 listarCaminhosAux(G,origem,destino,sequencia,0,0);
} 
